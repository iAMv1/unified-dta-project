setwd("D:/研究生打工区/桌面文件/DoubleSG-DTA/R语言代码/散点图")
library(ggplot2)
kiba=read.table('kiba_predict.txt.txt',sep = '\t')
p <- ggplot(kiba,aes(V2,V1))+
#使用geom_point()函数绘制散点图，其中alpha为设置透明度（在数据量大，重叠点多的情况下设置alpha）
geom_point(size=2.5,color="#1f77b4",alpha=1)+
#使用geom_smooth()函数绘制拟合线，其中lm为线性拟合，se设置为FALSE取消置信区间
geom_smooth(color="#FF0000",method="lm",se=FALSE)+
#设置x，y标签和散点图标题
labs(y="Prediction Affinities",x="Ground Truth")+scale_x_continuous(breaks=seq(8, 18, 1))+scale_y_continuous(breaks=seq(8, 18, 1))+
#样式大小调整
theme_bw()+theme(plot.title=element_text(hjust=0.5,size=20),axis.title=element_text(size=18,color ='black'),axis.text.x = element_text(size = 15,color ='black'),axis.text.y = element_text(size = 15,color ='black'),panel.grid=element_blank())
p + theme(panel.border = element_rect(fill=NA,color="black", size=4, linetype="solid"))
ggExtra::ggMarginal(p, type ="histogram",fill="#1f77b4",color="#1f77b4")
dev.off()
setwd("D:/研究生打工区/桌面文件/DoubleSG-DTA/R语言代码/散点图")
library(ggplot2)
kiba=read.table('kiba_predict.txt',sep = '\t')
p <- ggplot(kiba,aes(V2,V1))+
#使用geom_point()函数绘制散点图，其中alpha为设置透明度（在数据量大，重叠点多的情况下设置alpha）
geom_point(size=2.5,color="#1f77b4",alpha=1)+
#使用geom_smooth()函数绘制拟合线，其中lm为线性拟合，se设置为FALSE取消置信区间
geom_smooth(color="#FF0000",method="lm",se=FALSE)+
#设置x，y标签和散点图标题
labs(y="Prediction Affinities",x="Ground Truth")+scale_x_continuous(breaks=seq(8, 18, 1))+scale_y_continuous(breaks=seq(8, 18, 1))+
#样式大小调整
theme_bw()+theme(plot.title=element_text(hjust=0.5,size=20),axis.title=element_text(size=18,color ='black'),axis.text.x = element_text(size = 15,color ='black'),axis.text.y = element_text(size = 15,color ='black'),panel.grid=element_blank())
p + theme(panel.border = element_rect(fill=NA,color="black", size=4, linetype="solid"))
ggExtra::ggMarginal(p, type ="histogram",fill="#1f77b4",color="#1f77b4")
dev.off()
setwd("D:/研究生打工区/桌面文件/DoubleSG-DTA/R语言代码/散点图")
library(ggplot2)
kiba=read.table('kiba_predict.txt',sep = '\t')
p <- ggplot(kiba,aes(V2,V1))+
#使用geom_point()函数绘制散点图，其中alpha为设置透明度（在数据量大，重叠点多的情况下设置alpha）
geom_point(size=2.5,color="#1f77b4",alpha=1)+
#使用geom_smooth()函数绘制拟合线，其中lm为线性拟合，se设置为FALSE取消置信区间
geom_smooth(color="#FF0000",method="lm",se=FALSE)+
#设置x，y标签和散点图标题
labs(y="Prediction Affinities",x="Ground Truth")+scale_x_continuous(breaks=seq(8, 18, 1))+scale_y_continuous(breaks=seq(8, 18, 1))+
#样式大小调整
theme_bw()+theme(plot.title=element_text(hjust=0.5,size=20),axis.title=element_text(size=18,color ='black'),axis.text.x = element_text(size = 15,color ='black'),axis.text.y = element_text(size = 15,color ='black'),panel.grid=element_blank())
p + theme(panel.border = element_rect(fill=NA,color="black", size=4, linetype="solid"))
ggExtra::ggMarginal(p, type ="histogram",fill="#1f77b4",color="#1f77b4")
dev.off()
setwd("D:/研究生打工区/桌面文件/DoubleSG-DTA/R语言代码/散点图")
library(ggplot2)
kiba=read.table('kiba_predict.txt',sep = '\t')
p <- ggplot(kiba,aes(V2,V1))+
#使用geom_point()函数绘制散点图，其中alpha为设置透明度（在数据量大，重叠点多的情况下设置alpha）
geom_point(size=2.5,color="#1f77b4",alpha=1)+
#使用geom_smooth()函数绘制拟合线，其中lm为线性拟合，se设置为FALSE取消置信区间
geom_smooth(color="#FF0000",method="lm",se=FALSE)+
#设置x，y标签和散点图标题
labs(y="Prediction Affinities",x="Ground Truth")+scale_x_continuous(breaks=seq(0, 16, 1))+scale_y_continuous(breaks=seq(0, 16, 1))+
#样式大小调整
theme_bw()+theme(plot.title=element_text(hjust=0.5,size=20),axis.title=element_text(size=18,color ='black'),axis.text.x = element_text(size = 15,color ='black'),axis.text.y = element_text(size = 15,color ='black'),panel.grid=element_blank())
p + theme(panel.border = element_rect(fill=NA,color="black", size=4, linetype="solid"))
ggExtra::ggMarginal(p, type ="histogram",fill="#1f77b4",color="#1f77b4")
dev.off()
setwd("D:/研究生打工区/桌面文件/DoubleSG-DTA/R语言代码/散点图")
library(ggplot2)
kiba=read.table('kiba_predict.txt',sep = '\t')
p <- ggplot(kiba,aes(V2,V1))+
#使用geom_point()函数绘制散点图，其中alpha为设置透明度（在数据量大，重叠点多的情况下设置alpha）
geom_point(size=2.5,color="#1f77b4",alpha=1)+
#使用geom_smooth()函数绘制拟合线，其中lm为线性拟合，se设置为FALSE取消置信区间
geom_smooth(color="#FF0000",method="lm",se=FALSE)+
#设置x，y标签和散点图标题
labs(y="Prediction Affinities",x="Ground Truth")+scale_x_continuous(breaks=seq(0, 16, 1))+scale_y_continuous(breaks=seq(0, 15, 1))+
#样式大小调整
theme_bw()+theme(plot.title=element_text(hjust=0.5,size=20),axis.title=element_text(size=18,color ='black'),axis.text.x = element_text(size = 15,color ='black'),axis.text.y = element_text(size = 15,color ='black'),panel.grid=element_blank())
p + theme(panel.border = element_rect(fill=NA,color="black", size=4, linetype="solid"))
ggExtra::ggMarginal(p, type ="histogram",fill="#1f77b4",color="#1f77b4")
dev.off()
# 加载R包，没有安装请先安装  install.packages("包名")
library(ggplot2)
library(reshape2)
# 读取核密度图数据文件
df = read.table("D:\\研究生打工区\\桌面文件\\R\\davis.txt",header = T,sep = '\t')
# 把数据转换成ggplot常用的类型（长数据）
df = melt(df)                    # melt出自reshape2包
head(df)                         # 查看转换完成的数据的前几行
# 绘图
ggplot(df,aes(x=value,
fill=variable,     # fill填充颜色，根据变量名赋值
colour=variable))+ # colour图形边界颜色，根据变量名赋值
geom_density(alpha=0.2,        # 填充颜色透明度
size=1,           # 线条粗细
linetype = 1      # 线条类型1是实线，2是虚线
)+
labs(x ="Affinity Score", y = "Density")+scale_x_continuous(breaks=seq(8, 18, 1))+
theme_bw()+theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank())                   # 白色主题
# 补充知识：
# fill   一般是指填充颜色
# color  一般是指线和点的颜色
# colour 一般是指图形边界颜色
# 加载R包，没有安装请先安装  install.packages("包名")
library(ggplot2)
library(reshape2)
# 读取核密度图数据文件
df = read.table("D:/研究生打工区/桌面文件/DoubleSG-DTA/R语言代码/散点图/kiba_predict.txt",header = T,sep = '\t')
# 把数据转换成ggplot常用的类型（长数据）
df = melt(df)                    # melt出自reshape2包
head(df)                         # 查看转换完成的数据的前几行
# 绘图
ggplot(df,aes(x=value,
fill=variable,     # fill填充颜色，根据变量名赋值
colour=variable))+ # colour图形边界颜色，根据变量名赋值
geom_density(alpha=0.2,        # 填充颜色透明度
size=1,           # 线条粗细
linetype = 1      # 线条类型1是实线，2是虚线
)+
labs(x ="Affinity Score", y = "Density")+scale_x_continuous(breaks=seq(8, 18, 1))+
theme_bw()+theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank())                   # 白色主题
# 补充知识：
# fill   一般是指填充颜色
# color  一般是指线和点的颜色
# colour 一般是指图形边界颜色
# 加载R包，没有安装请先安装  install.packages("包名")
library(ggplot2)
library(reshape2)
# 读取核密度图数据文件
df = read.table("D:/研究生打工区/桌面文件/DoubleSG-DTA/R语言代码/散点图/kiba_predict.txt",header = T,sep = '\t')
# 把数据转换成ggplot常用的类型（长数据）
df = melt(df)                    # melt出自reshape2包
head(df)                         # 查看转换完成的数据的前几行
# 绘图
ggplot(df,aes(x=value,
fill=variable,     # fill填充颜色，根据变量名赋值
colour=variable))+ # colour图形边界颜色，根据变量名赋值
geom_density(alpha=0.2,        # 填充颜色透明度
size=1,           # 线条粗细
linetype = 1      # 线条类型1是实线，2是虚线
)+
labs(x ="Affinity Score", y = "Density")+scale_x_continuous(breaks=seq(0, 15, 1))+
theme_bw()+theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank())                   # 白色主题
# 补充知识：
# fill   一般是指填充颜色
# color  一般是指线和点的颜色
# colour 一般是指图形边界颜色
setwd("D:/研究生打工区/桌面文件/DoubleSG-DTA/R语言代码/散点图")
library(ggplot2)
kiba=read.table('kiba_predict.txt',sep = '\t')
p <- ggplot(kiba,aes(V2,V1))+
#使用geom_point()函数绘制散点图，其中alpha为设置透明度（在数据量大，重叠点多的情况下设置alpha）
geom_point(size=2.5,color="#1f77b4",alpha=1)+
#使用geom_smooth()函数绘制拟合线，其中lm为线性拟合，se设置为FALSE取消置信区间
geom_smooth(color="#FF0000",method="lm",se=FALSE)+
#设置x，y标签和散点图标题
labs(y="Prediction Affinities",x="Ground Truth")+scale_x_continuous(breaks=seq(0, 15, 2))+scale_y_continuous(breaks=seq(0, 15, 2))+
#样式大小调整
theme_bw()+theme(plot.title=element_text(hjust=0.5,size=20),axis.title=element_text(size=18,color ='black'),axis.text.x = element_text(size = 15,color ='black'),axis.text.y = element_text(size = 15,color ='black'),panel.grid=element_blank())
p + theme(panel.border = element_rect(fill=NA,color="black", size=4, linetype="solid"))
ggExtra::ggMarginal(p, type ="histogram",fill="#1f77b4",color="#1f77b4")
setwd("D:/研究生打工区/桌面文件/DoubleSG-DTA/R语言代码/散点图")
library(ggplot2)
kiba=read.table('kiba_predict.txt',sep = '\t')
p <- ggplot(kiba,aes(V2,V1))+
#使用geom_point()函数绘制散点图，其中alpha为设置透明度（在数据量大，重叠点多的情况下设置alpha）
geom_point(size=2.5,color="#1f77b4",alpha=1)+
#使用geom_smooth()函数绘制拟合线，其中lm为线性拟合，se设置为FALSE取消置信区间
geom_smooth(color="#FF0000",method="lm",se=FALSE)+
#设置x，y标签和散点图标题
labs(y="Prediction Affinities",x="Ground Truth")+scale_x_continuous(breaks=seq(1, 15, 2))+scale_y_continuous(breaks=seq(1, 15, 2))+
#样式大小调整
theme_bw()+theme(plot.title=element_text(hjust=0.5,size=20),axis.title=element_text(size=18,color ='black'),axis.text.x = element_text(size = 15,color ='black'),axis.text.y = element_text(size = 15,color ='black'),panel.grid=element_blank())
p + theme(panel.border = element_rect(fill=NA,color="black", size=4, linetype="solid"))
ggExtra::ggMarginal(p, type ="histogram",fill="#1f77b4",color="#1f77b4")
